#!/usr/bin/perl -w
use strict;
$| = 1;

#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the  nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#	Copyright (C) 2008-2017 Aleksandr Deviatkin aka alid

#
# Корректировка часов счетчика Меркурий-230
# 2008-04-15 alid
# 2011-08-02 alid
# 2017-02-05 Mercury203.pm
#

use lib "$ENV{MY}/lib";
use Mercury230;
use GHPowerUtils;

my (@args, %opts);
foreach(@ARGV){
   if(/^\-(\S)(.*)/){	$opts{$1} = $2;	} else {	push @args, $_;	}
}
my ($addr, $passwd, $passwd2, $device) = (@args);
die "Usage: $0 addr password1 password2 serial-dev"	unless(defined $addr && $passwd && $device);
my $verb = exists $opts{v};
my $adj = exists $opts{a};
my $diff = exists $opts{d};			# Ошибка часов (в сек)
my $set = exists $opts{F};			# принудительная установка времени (нужен пароль второго уровня доступа)
my $retries = (exists $opts{r}) ? $opts{r} : 10;

#my $addr = sprintf("%x",$saddr);
#$passwd=sprintf("%x %x %x %x %x %x", split("",$passwd,6));
#$passwd2=sprintf("%x %x %x %x %x %x", split("",$passwd2,6))	if($passwd2);
print "Addr: [$addr] Pw: [$passwd] [$passwd2]\n"	if $verb;

my $unit = Mercury230->new($device,$addr,$passwd,$passwd2,$retries,$verb);

if($verb) {
	print "Connection testing ... ";
	my $status = $unit->tst();
	print "$status\n";
	die	"[$addr] Connection failed: [$status]"	unless($status=~/ok/);
}
my ($ss,$mm,$hh,$md,$mon,$ye,$wd) = (localtime(time()))[0,1,2,3,4,5,6];
$ye += 1900; $ye = sprintf("%4d",$ye); $ye = substr($ye,2,2);
$mon++;
($ss,$mm,$hh,$mon,$md,$wd) = map {sprintf("%02d",$_)} ($ss,$mm,$hh,$mon,$md,$wd);
if($adj) {
	print "Time correction: $hh:$mm:$ss\n"	if($verb);
	my $status = $unit->adj_time($hh,$mm,$ss);
	print "$status\n"	if $verb;
	die	"[$addr] Session failed: [$status]"	unless($status=~/ok/);
}
elsif($set) {
	print "Time setting: $ye-$mon-$md $wd $hh:$mm:$ss\n"	if($verb);
	my $status = $unit->set_time($ye,$mon,$md,$wd,$hh,$mm,$ss);
	print "$status\n"	if $verb;
	die	"[$addr] Session failed: [$status]"	unless($status=~/ok/);
}
elsif($diff) {	# Показать ошибку часов
	my $res = $unit->get_time();
	print "$res\n"	if $verb;
	my ($d,$t) = ($res =~ m/(\d{4}\-\d{2}\-\d{2})\s+\d{1,2}\s+(\d{2}\:\d{2}\:\d{2})/);
	my $stime = UTime("$d $t");
	my $delta = $stime - time();
	print "[$addr] $delta\n";

} else {	# Только считать время
	print $unit->get_time()."\n";
}
$unit->quit();

