#!/usr/local/bin/perl
#
#       Copyright (C) 2008-2012 Александр Девяткин, "Зелёная горка"
#
#       Разрешается повторное распространение и использование как в виде исходного
#       кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих
#       условий:
#
#       * При повторном распространении исходного кода должно оставаться указанное
#         выше уведомление об авторском праве, этот список условий и последующий
#         отказ от гарантий.
#       * При повторном распространении двоичного кода должна сохраняться указанная
#         выше информация об авторском праве, этот список условий и последующий отказ
#         от гарантий в документации и/или в других материалах, поставляемых при
#         распространении.
#       * Ни название "Зелёная горка", ни имена ее сотрудников не могут быть
#         использованы в качестве поддержки или продвижения продуктов, основанных
#         на этом ПО без предварительного письменного разрешения.
#
#       ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ
#	"КАК ОНА ЕСТЬ" БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ,
#	ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ
#	И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. НИ В КОЕМ СЛУЧАЕ, ЕСЛИ НЕ ТРЕБУЕТСЯ
#	СООТВЕТСТВУЮЩИМ ЗАКОНОМ, ИЛИ НЕ УСТАНОВЛЕНО В УСТНОЙ ФОРМЕ, НИ ОДИН ВЛАДЕЛЕЦ
#	АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО
#	РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
#	ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ,
#	ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ,
#	НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ
#	ПОТЕРЯМИ ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ
#	СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ
#	ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
#

#       Copyright (C) 2008-2012 Aleksandr Deviatkin, "Green Hill"
#
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the Green Hill nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

$|=1;
use strict;
use utf8;
use open qw(:std :utf8);
use DBI;
use LWP::UserAgent;
use XML::Simple;
#use open qw(:std :utf8);
#use Data::Dumper;

#
# Синхронизация списков с carddav
# 2015-11-30 alid
#

my (@args, %opts);
foreach(@ARGV){
	if(/^\-(\S)(\S*)/) { $opts{$1} = $2; } else {  push @args, $_; }
}

my ($database, $dav_url) = (@args);
die "Usage: $0 database user:password\@http://server/caldav.php/addressbook"                unless($database && $dav_url);
my $verb = exists $opts{v};
my $pgport = 5432;

my ($davuser,$davpwd) = ('','');
my $url;

if($dav_url =~ /([^\@]+)\@([^\@]+)/) {
	($davuser,$davpwd) = split(":",$1);
	$url = $2;
} else {
		$url = $dav_url;
}
my ($davhost) = ($url =~ /^(https*\:\/\/[^\/]+)/);
print "host: $davhost\n"	if($verb);

my $ua = LWP::UserAgent->new;

my $req = HTTP::Request->new(REPORT => $url);
$req->authorization_basic($davuser, $davpwd);
$req->content_type('application/xml; charset=utf-8');
$req->content("<card:addressbook-query xmlns:d='DAV:' xmlns:card='urn:ietf:params:xml:ns:carddav'><d:prop><d:getetag /><card:address-data><card:prop name='UID' /></card:address-data></d:prop></card:addressbook-query>");
# Вот так вместе с самими vcard
#$req->content("<card:addressbook-query xmlns:d='DAV:' xmlns:card='urn:ietf:params:xml:ns:carddav'><d:prop><d:getetag /><card:address-data /></d:prop></card:addressbook-query>");

my $res = $ua->request($req);

my $Data;
if ($res->is_success) {
        $Data = XMLin($res->content);

} else {
        print "Error: " . $res->status_line . "\n";
		exit 1;
}

my $dbh = DBI->connect("dbi:Pg:dbname=$database;port=$pgport","","", { RaiseError => 1, AutoCommit => 1});
my $sth = $dbh->prepare("SELECT active,fullname,carddata,uri,etag,uid FROM contacts WHERE uid=?");
my $ins = $dbh->prepare("INSERT INTO contacts (fullname,carddata,uri,etag,uid) VALUES (?,?,?,?,?)");
my $upd = $dbh->prepare("UPDATE contacts SET fullname=?,carddata=?,uri=?,etag=? WHERE uid=?");
my $del = $dbh->prepare("UPDATE contacts SET active=0 WHERE uid=?");
my $fl = $dbh->prepare("SELECT uid,id FROM contacts WHERE active=1");

# Local full active list
# полный список с active=1
$fl->execute();
my %Fl;
while( my $r = $fl->fetchrow_arrayref) {
	$Fl{$r->[0]} = $r->[1];
}
$fl->finish;

my ($total,$mod,$news,$dels,$ers) = (0,0,0,0,0);
foreach my $vcard (@{$Data->{response}}) {
	if($vcard->{propstat}->{status} =~ /OK$/) {
		my ($xuid) = ($vcard->{propstat}->{prop}->{'VC:address-data'} =~ /^UID\:([\w\-]*)$/m);
		$xuid =~ s/\r//g;
		$sth->execute($xuid);
		my ($active,$fullname,$carddata,$uri,$etag,$uid) = $sth->fetchrow_array;
		$sth->finish;
		$total++;
		$vcard->{propstat}->{prop}->{getetag} =~ s/[^\w\-]//g;

		if($uid) {
			if($vcard->{propstat}->{prop}->{getetag} ne $etag) {	# Updated vcard
				my ($fullname,$carddata,$uid) = getvcard($vcard->{href});
				if($uid) {
					print "UPDATE: $fullname href=".$vcard->{href}." uid=$uid\n"	if($verb);
#print "IsUTF: ".utf8::is_utf8($carddata)."\n\n";
					$upd->execute($fullname,$carddata,$vcard->{href},$vcard->{propstat}->{prop}->{getetag},$uid);
					$mod++;
				} else {
					print "ERROR UPDATE: Cant get data from href=".$vcard->{href}."\n"	if($verb);
					$ers++;
				}
			}
			delete $Fl{$uid};	# не будем удалять эту запись

		} else {	# New vcard
			my ($fullname,$carddata,$uid) = getvcard($vcard->{href});
			if($uid) {
				print "NEW: $fullname href=".$vcard->{href}."\n"	if($verb);
				$ins->execute($fullname,$carddata,$vcard->{href},$vcard->{propstat}->{prop}->{getetag},$uid);
				$news++;
			} else {
				print "ERROR NEW: Cant get data from href=".$vcard->{href}."\n"	if($verb);
				$ers++;
			}
		}

	} else {
		print "ERROR: href=".$vcard->{href}." status=".$vcard->{propstat}->{status}."\n"	if($verb);
		$ers++;
	}
}

# Удаление лишних vcard (удаленных на сервере)
foreach my $uid (keys %Fl) {
	print "DEL: $uid\n"	if($verb);
	$del->execute($uid);
	$dels++;
}

$dbh->disconnect;
print "Total: $total Modified: $mod New: $news Deleted: $dels Errors: $ers\n"	if($verb);

sub getvcard {
	my $href = shift;

	my $req = HTTP::Request->new(GET => "$davhost/$href");
	$req->authorization_basic($davuser, $davpwd);
	$req->content_type('text/vcard; charset=utf-8');
	my $res = $ua->request($req);
	if ($res->is_success) {
		my ($fullname) = ($res->decoded_content =~ /^FN\:(.*)$/m);
		$fullname =~ s/\r//g;
		my ($uid) = ($res->decoded_content =~ /^UID\:(.*)$/m);
		$uid =~ s/\r//g;
#print $res->content;
#print "$fullname\n";

		return($fullname,$res->decoded_content,$uid);

	} else {
        print "Error: " . $res->status_line . "\n";
		return;
	}
}

__END__

                        {
                          'propstat' => {
                                        'status' => 'HTTP/1.1 200 OK',
                                        'prop' => {
                                                  'getetag' => '"f8d8d7c0e201f5250e22f46eb089a7e1"',
                                                  'VC:address-data' => 'BEGIN:VCARD
UID:e6fc6ac8-ec33-18e4-5d83-349be5392094
END:VCARD
'
                                                }
                                      },
                          'href' => '/davical/caldav.php/gh/persons/e6fc6ac8-ec33-18e4-5d83-349be5392094.ics'
                        },






