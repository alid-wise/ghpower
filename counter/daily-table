#!/usr/bin/perl

#
#       Copyright (C) 2008-2012 Александр Девяткин, "Зелёная горка"
#
#       Разрешается повторное распространение и использование как в виде исходного
#       кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих
#       условий:
#
#       * При повторном распространении исходного кода должно оставаться указанное
#         выше уведомление об авторском праве, этот список условий и последующий
#         отказ от гарантий.
#       * При повторном распространении двоичного кода должна сохраняться указанная
#         выше информация об авторском праве, этот список условий и последующий отказ
#         от гарантий в документации и/или в других материалах, поставляемых при
#         распространении.
#       * Ни название "Зелёная горка", ни имена ее сотрудников не могут быть
#         использованы в качестве поддержки или продвижения продуктов, основанных
#         на этом ПО без предварительного письменного разрешения.
#
#       ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ
#	"КАК ОНА ЕСТЬ" БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ,
#	ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ
#	И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. НИ В КОЕМ СЛУЧАЕ, ЕСЛИ НЕ ТРЕБУЕТСЯ
#	СООТВЕТСТВУЮЩИМ ЗАКОНОМ, ИЛИ НЕ УСТАНОВЛЕНО В УСТНОЙ ФОРМЕ, НИ ОДИН ВЛАДЕЛЕЦ
#	АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО
#	РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
#	ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ,
#	ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ,
#	НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ
#	ПОТЕРЯМИ ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ
#	СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ
#	ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
#

#       Copyright (C) 2008-2012 Aleksandr Deviatkin, "Green Hill"
#
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the Green Hill nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


$|=1;
use DBI;
#use Time::Local;
use Date::Manip;
use strict;

#
# Заполнение таблицы daily
# ежедневные показания счетчиков на начало суток
# 2015-02-05 alid
# 2019-10-14 Показания счетчика - самое последнее значение за предыдущий день
#

my (@args, %opts);
foreach(@ARGV){
	if(/^\-(\S)(\S*)/) { $opts{$1} = $2; } else {  push @args, $_; }
}
my ($database, $date) = (@args);
die "Usage: $0 database [date]"		unless($database);
my $verb = exists $opts{v};
my $fill = exists $opts{F};		# Заполнить, начиная с указанной даты
my $clean = exists $opts{C};	# предварительно очистить таблицу
my $pgport = 5432;
my $pghost = 'localhost';
my $acid = $opts{c};			# Только для этого счетчика

undef $date 	unless ($date =~ m/(\d{4})-(\d{2})-(\d{2})/);
unless ($date) {
	# Если не задана дата, то сегодня
#	$date = sprintf("%04d-%02d-%02d", sub{($_[5]+1900, $_[4]+1, $_[3])}->(localtime));
	$date =  UnixDate(ParseDate("today"), "%Y-%m-%d");
	undef $fill;
	undef $clean;
}

my @Dates;
if($fill) {
	my $tdate = ParseDate("today");
#	my $idate = DateCalc($date,"+1 day");
	my $idate = $date;
	while(Date_Cmp($tdate,$idate) >= 0) {
		push @Dates, UnixDate($idate, "%Y-%m-%d");
		$idate = DateCalc($idate,"+1 day");
	}
} else {
	push @Dates, $date;
}

my $dbh = DBI->connect("dbi:Pg:dbname=$database;host=$pghost;port=$pgport","","", { RaiseError => 1, AutoCommit => 0});
if($clean) {
	print "Cleaning table daily\n"	if($verb);
	$dbh->do("delete from daily");
}
foreach my $date (@Dates) {

#	my $date2 = "$date 23:59:59";
	print "Date: $date - $date\n"	if($verb);
	my ($total,$updated,$inserted) = (0,0,0);
	# Список счетчиков
	my @clist;
	my $sth = $dbh->prepare("select counter from monitor where dt>=(date \'$date\' - interval '1 day') and dt<? group by counter");
	$sth->execute($date);
	while(my $r = $sth->fetchrow_array) {
		push @clist, $r;
		$total++;
	}
	$sth->finish;

	$sth = $dbh->prepare("select se1ai,se2ai from monitor where counter=? and dt>=(date \'$date\' - interval '1 day') and dt<? order by dt desc limit 1");
	my $cget = $dbh->prepare("select id from daily where cid=? and date = ?");
	my $ins = $dbh->prepare("insert into daily (cid,date,se1,se2,mode) values (?,?,?,?,(select tmode from counters where id=?))");
	my $upd = $dbh->prepare("update daily set se1=?,se2=? where id=?");

	foreach my $cid (@clist) {
		next	if($acid && ($acid != $cid));	# Только для одного счетчика
		$sth->execute($cid, $date);
		my ($se1,$se2) = $sth->fetchrow_array;
		$sth->finish;
		next	unless(($se1 =~ m/\d+/) && ($se2 =~ m/\d+/));	# Хоть какие-нибудь данные должны быть
		print "\t$cid\t$date\t$date\t$se1\t$se2\n"	if($verb);
		$cget->execute($cid,$date);
		my ($id) = $cget->fetchrow_array;
		$cget->finish;
		if($id) {
			$upd->execute($se1,$se2,$id);
			$updated++;
		} else {
			$ins->execute($cid,$date,$se1,$se2,$cid);
			$inserted++;
		}
	}
	print " Counters: $total Inserted: $inserted Updated: $updated\n"	if($verb);
}

$dbh->commit;
$dbh->disconnect;

