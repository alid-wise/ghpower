#!/usr/bin/perl -w
use strict;
$| = 1;

#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the  nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#	Copyright (C) 2008,2017 Aleksandr Deviatkin aka alid



#
# Управление реле счетчика Меркурий-203.2Т
# 2009-03-28 alid
# 2017-02-05 Mercury203.pm
#

use lib "$ENV{MY}/lib";
use Mercury203;

my (@args, %opts);
foreach(@ARGV){
   if(/^\-(\S)(.*)/){	$opts{$1} = $2;	} else {	push @args, $_;	}
}
my ($saddr, $device, $command) = (@args);
die "Usage: $0 addr serial-dev [on,0ff,1,0]"	unless(defined $saddr && $device);
my $verb = exists $opts{v};
my $retries = (exists $opts{r}) ? $opts{r} : 10;

my $addr = sprintf("%08x",$saddr);
$addr =~ s/(\w\w)(\w\w)(\w\w)(\w\w)/$1 $2 $3 $4/;
print "Addr: [$addr]\n"	if $verb;

my $unit = Mercury203->new($device,$addr,'','',$retries,$verb);

if($verb) {
	print "Connection testing ... "	if $verb;
	my $status = $unit->tst();
	print "$status\n"	if $verb;
	die	"[$addr] Connection failed: [$status]"	unless($status=~/ok/);
}

if(defined $command) {	# Задана команда
	my $cmd;
	if($command =~ /off|0|false/i) {
		$cmd = 'aa';
	} elsif($command =~ /on|1|true/i) {
		$cmd = '00';
	} elsif($command =~ /lim/i) {
		$cmd = '55';
	} else {
		die "Wrong command: $command";
	}
	print "[$saddr] ".$unit->set_switch($cmd)."\n";
}
# Читаем текущее состояние
print "[$saddr] ".$unit->get_switch()."\n";

$unit->quit();

