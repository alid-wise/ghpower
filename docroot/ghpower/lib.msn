<%method listload>
<%doc>
	Список
</%doc>
<%args>
	$dbh
	$name
	$nocache => 0
</%args>
<%init>
	unless($nocache) {
		my ($rv, $cached) = $m->cache_self(
			expire_in => '1 hour',
			busy_lock => '5sec',
			ttl => '5minutes',
			key => "$name",
			expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
		);
		return $rv	if($cached);
	}
	my $ghpower = GHPower->new($dbh);
	return $ghpower->ListLoad($name);
</%init>
</%method>

<%method counter_info>
<%doc>
	Параметры счетчика
</%doc>
<%args>
	$dbh
	$id
</%args>
<%init>
	my $ghpower = GHPower->new($dbh);
	return $ghpower->Counter_info($id);
</%init>
</%method>

<%method mexpenses>
<%doc>
	Месячные расходы счетчика
</%doc>
<%args>
	$dbh
	$cid => 0
	$ymon => undef
	$nocache => 1
</%args>
<%init>
$ymon = UnixDate("1 month ago","%Y-%m")	unless($ymon);
unless($nocache) {
	my ($rv, $cached) = $m->cache_self(
		expire_in => '1 hour',
		busy_lock => '5sec',
		ttl => '5minutes',
		key => "mexpenses_".$cid."_".$ymon,
		expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
	);
	return $rv	if($cached);
}
my $ghpower = GHPower->new($dbh);
return $ghpower->mExpenses($cid,$ymon);
</%init>
</%method>

<%method global>
<%doc>
	Общая информация
</%doc>
<%args>
	$dbh
	$nocache => 0
</%args>
<%init>
unless($nocache) {
	my ($rv, $cached) = $m->cache_self(
		expire_in => '1 hour',
		busy_lock => '5sec',
		ttl => '5minutes',
		key => "global",
		expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
	);
	return $rv	if($cached);
}
my $ghpower = GHPower->new($dbh);
return $ghpower->Global;
</%init>
</%method>

<%method cflistload>
<%doc>
	Список счетчиков
</%doc>
<%args>
	$dbh
	$nocache => 0
	$showdel => 0
</%args>
<%init>
	unless($nocache) {
		my ($rv, $cached) = $m->cache_self(
			expire_in => '1 hour',
			busy_lock => '5sec',
			ttl => '5minutes',
			key => "c-full-list",
			expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
		);
		return $rv	if($cached);
	}
	my $ghpower = GHPower->new($dbh);
	return $ghpower->Counters_list($showdel);
</%init>
</%method>

<%method grsum>
<%doc>
	Текущая сумма мощностей по лучу
</%doc>
<%args>
	$dbh
	$gid
	$nocache => 1
</%args>
<%init>
	unless($nocache) {
		my ($rv, $cached) = $m->cache_self(
			expire_in => '1 hour',
			busy_lock => '5sec',
			ttl => '5minutes',
			key => "grsum_".$gid,
			expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
		);
		return $rv	if($cached);
	}
	my $ghpower = GHPower->new($dbh);
	return $ghpower->grsum($gid);
</%init>
</%method>

<%method lastime>
<%doc>
	Время последнего обновления данных
</%doc>
<%args>
	$dbh
	$nocache => 1
</%args>
<%init>
	unless($nocache) {
		my ($rv, $cached) = $m->cache_self(
			expire_in => '1 hour',
			busy_lock => '5sec',
			ttl => '5minutes',
			key => "lastime",
			expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
		);
		return $rv	if($cached);
	}
	my $ghpower = GHPower->new($dbh);
	return $ghpower->lastime;
</%init>
</%method>

<%method tariff>
<%doc>
	Текущие тарифы
</%doc>
<%args>
	$dbh
	$nocache => 0
</%args>
<%init>
	unless($nocache) {
		my ($rv, $cached) = $m->cache_self(
			expire_in => '1 hour',
			busy_lock => '5sec',
			ttl => '5minutes',
			key => "tariff",
			expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
		);
		return $rv	if($cached);
	}
	my $ghpower = GHPower->new($dbh);
	return $ghpower->tariff();
</%init>
</%method>

<%method getcounter_last>
<%doc>
	Последние показания счетчика, дата
</%doc>
<%args>
	$dbh
	$id
	$nocache => 1
</%args>
<%init>
	unless($nocache) {
		my ($rv, $cached) = $m->cache_self(
			expire_in => '1 hour',
			busy_lock => '5sec',
			ttl => '5minutes',
			key => "getcounter_last_$id",
			expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
		);
		return $rv	if($cached);
	}
	return undef	unless($id);
	my $ghpower = GHPower->new($dbh);
	return $ghpower->getcounter_last($id);
</%init>
</%method>

<%method getcost_simple>
<%doc>
	### DEPRECATED ###
	Стоимость потраченного электричества
	без учета изменения тарифов
</%doc>
<%args>
	$dbh
	$flow1
	$flow2
	$mode => 2
</%args>
<%init>
	my $ghpower = GHPower->new($dbh);
	return $ghpower->getcost_simple($flow1, $flow2, $mode);
</%init>
</%method>

<%method get_cbalance>
<%doc>
	Текущий баланс счетчика
</%doc>
<%args>
	$dbh
	$cid
</%args>
<%init>
	my $ghpower = GHPower->new($dbh);
	return $ghpower->get_cbalance($cid);
</%init>
</%method>

<%method re_cbalance>
<%doc>
	Обновление баланса счетчика
</%doc>
<%args>
	$dbh
	$cid
</%args>
<%init>
	my $ghpower = GHPower->new($dbh);
	return $ghpower->re_cbalance($cid);
</%init>
</%method>

<%method getcounter_date>
<%doc>
	Показания счетчика на дату
</%doc>
<%args>
	$dbh
	$id
	$nocache => 1
	$date
</%args>
<%init>
unless($nocache) {
	my ($rv, $cached) = $m->cache_self(
		expire_in => '1 hour',
		busy_lock => '5sec',
		ttl => '5minutes',
		key => "getcounter_day_$id"."_$date",
		expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
	);
	return $rv	if($cached);
}
my $ghpower = GHPower->new($dbh);
#return $ghpower->getcounter_date($id,$date);



return undef	if(!$id || !($date =~ /^\d{4}\-\d{2}\-\d{2}$/));
my $ret = undef;
my $sth = $dbh->prepare("SELECT date AS date,cid AS counter,se1 AS se1ai,se2 AS se2ai,date AS dt FROM daily WHERE cid=? AND date>=? ORDER BY date LIMIT 1");
$sth->execute($id,$date);
while(my $r = $sth->fetchrow_hashref) {
		$ret = $r;
}
$sth->finish;
$ret = {}	unless $ret;
return $ret;
</%init>
</%method>


<%method lastcounter>
<%doc>
	Последние показания счетчика
</%doc>
<%args>
	$dbh
	$id => 0
	$nocache => 1
</%args>
<%init>
unless($nocache) {
	my ($rv, $cached) = $m->cache_self(
		expire_in => '1 hour',
		busy_lock => '5sec',
		ttl => '5minutes',
		key => "lastcounter_$id",
		expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
	);
	return $rv	if($cached);
}
	my $ghpower = GHPower->new($dbh);
	return $ghpower->lastcounter($id);
</%init>
</%method>


<%method get_Domain>
<%doc>
	Информация из LDAP о заданном учестке
</%doc>
<%args>
	$dbh
	$dn
</%args>
<%init>
	my $ghpower = GHPowerLDAP->new($dbh);
	return $ghpower->get_Domain($dn);
</%init>
</%method>


<%method Domains_Struct>
<%doc>
	Вся структура ou=domains с владельцами и пр.
</%doc>
<%args>
	$dbh
	$nocache => 1
</%args>
<%init>
	unless($nocache) {
		my ($rv, $cached) = $m->cache_self(
			expire_in => '1 hour',
			busy_lock => '5sec',
			ttl => '5minutes',
			key => "Domains_Struct",
			expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
		);
		return $rv	if($cached);
	}
	my $ghpower = GHPower->new($dbh);
	return $ghpower->Domains_Struct;
</%init>
</%method>

















<%method ownerlist>
<%doc>
	Список людей
	vCards from owners
</%doc>
<%args>
	$dbh
	$nocache => 0
</%args>
<%init>

unless($nocache) {
	my ($rv, $cached) = $m->cache_self(
		expire_in => '1 hour',
		busy_lock => '5sec',
		ttl => '5minutes',
		key => "owners",
		expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
	);
	return $rv	if($cached);
}
my $ret = undef;
my $sth = $dbh->prepare("select uid,fullname from contacts where active=1");
$sth->execute();
while(my $r = $sth->fetchrow_hashref) {
	my ($lname,$fname,$mname) = split(" ",$r->{fullname});
	if($fname =~ /^(.){1}/) {
		$r->{name} = $lname." $1.";
		if($mname =~ /^(.)/) {
			$r->{name} .= "$1.";
		}
	}
	$r->{lname} = $lname || "";
	$ret->{$r->{uid}} = $r;
}
$sth->finish;
$ret = {}	unless $ret;
return $ret;
</%init>
</%method>


<%method now>
<%doc>
	Текущая дата
</%doc>
<%args>
	$nocache => 0
</%args>
<%init>
unless($nocache) {
	my ($rv, $cached) = $m->cache_self(
		expire_in => '1 hour',
		busy_lock => '5sec',
		ttl => '5minutes',
		key => "now",
		expire_if => sub {$r && $r->headers_in->{'Pragma'} =~ /no-cache/},
	);
	return $rv	if($cached);
}
use Date::Manip;
my $ret = undef;
$ret->{today} = UnixDate("today","%Y-%m-%d");
$ret->{pretty} = UnixDate("today","%d.%m.%Y");
$ret = {}	unless $ret;
return $ret;
</%init>
</%method>

<%method pretty_date>
<%doc>
	Преобразование даты из YYYY-MM-DD в DD-MM-YYYY
</%doc>
<%args>
	$date
</%args>
<%init>

if($date =~ /(\d{4})\-(\d{2})\-(\d{2})/) {
	return sprintf("%02d.%02d.%d",$3,$2,$1);
}
return undef;
</%init>
</%method>

<%method check_date>
<%doc>
	Проверка корректности даты
</%doc>
<%args>
	$date
</%args>
<%init>
	use Date::Manip;
	my $t;
	if($date =~ /(\d{1,2})[\-\.](\d{1,2})[\-\.](\d{4})/) {
		$t = sprintf("%d-%02d-%02d",$3,$2,$1);
	} elsif($date =~ /(\d{4})\-(\d{1,2})\-(\d{1,2})/) {
		$t = sprintf("%d-%02d-%02d",$1,$2,$3);
	} else {
		return undef;
	}
	return $t 	if(ParseDate($t));
	return undef;
</%init>
</%method>


<%method pretty>
<%doc>
	Преобразование числа в читаемый формат
</%doc>
<%args>
	$value
</%args>
<%init>

$value = sprintf("%0.2f", $value);
$value =~ s/\./\,/g;
return $value;
</%init>
</%method>

<%method b_tariff_type>
<%doc>
	Типы членских (и других) взносов
</%doc>
<%args>
	$dbh => 0
</%args>
<%init>
	my $ghpower = GHPower->new($dbh);
	return $ghpower->b_tariff_type();
</%init>
</%method>


<%method set_fee>
<%doc>
	Начисление членских (и других) взносов
</%doc>
<%args>
	$dbh
	$bid
	$auth
	$verb => 0
</%args>
<%init>
	my $ghpower = GHPower->new($dbh);
	return $ghpower->set_fee($bid,$auth,$verb);
</%init>
</%method>

<%method ClipStr>
<%doc>
	Усечение текстовой строки
</%doc>
<%args>
	$str
	$len
	$tail => '...'
</%args>
<%init>
	return GHPowerUtils::ClipStr($str,$len,$tail);
</%init>
</%method>


<%method get_next_outnum>
<%doc>
	Получение следующего исходящего номера
</%doc>
<%args>
	$dbh
	$auth
	$date => undef
	$to => undef
	$subj => undef
</%args>
<%init>
	my $ghpower = GHPower->new($dbh);
	return $ghpower->get_next_outnum($auth, $date, $to, $subj);
</%init>
</%method>
